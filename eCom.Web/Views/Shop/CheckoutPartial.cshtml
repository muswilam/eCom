@model CheckoutViewModel

@if (Model != null && Model.CartProducts != null && Model.CartProducts.Count > 0)
{
    var i = 1;
    <section class="flat-row main-shop shop-slidebar">
        <div class="container">
            <div class="row">
                <div class="col-md-4 order-md-2 mb-4">
                    <h4 class="d-flex justify-content-between align-items-center mb-3">
                        <span class="text-muted">Your cart</span>
                    </h4>
                    <ul class="list-group mb-3">
                        @foreach (var product in Model.CartProducts)
                        {
                            var productQuantity = Model.CartProductIds.Where(productId => productId == product.Id).Count();

                            <li class="list-group-item  d-block justify-content-between lh-condensed" data-id="@product.Id">
                                <div>
                                    <h6 class="my-0">@i - @product.Name <span class="badge badge-success pull-right p-1">Qty: @productQuantity </span> </h6>
                                    <small class="text-muted">@(product.Description != null && product.Description.Length > 100 ? product.Description.Substring(0, 99) : product.Description)</small>
                                </div>
                                <span class="text-muted text-danger">
                                    Unit price: $@product.Price
                                    @if (productQuantity > 1)
                                    {
                                        <text>- Total price: $</text>  @(productQuantity * product.Price)
                                    }
                                </span>
                            </li>
                                    i++;
                        }

                        <li class="list-group-item d-flex justify-content-between">
                            <span>Total (USD)</span>
                            <strong class="text-danger">$@Model.CartProducts.Sum(x => x.Price * Model.CartProductIds.Where(productId => productId == x.Id).Count())</strong>
                        </li>
                    </ul>
                </div>

                <div id="userInfoDiv" class="col-md-8 order-md-1">
                    <h4 class="mb-3">Billing address</h4>
                    <form id="updateUserForm" class="needs-validation" novalidate="">
                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <label for="firstName">Name</label>
                                <input type="text" class="form-control" name="Name" id="Name" placeholder="" value="@Model.User.Name" required="">
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="email">Email</label>
                            <input disabled class="form-control" value="@Model.User.Email">
                        </div>

                        <div class="mb-3">
                            <label for="address">Address</label>
                            <input type="text" class="form-control" name="Address" id="address" placeholder="1234 Main St" value="@Model.User.Address" required="">

                        </div>
                        <hr class="mb-4">
                        <div class="d-flex justify-content-center align-content-center">
                            <button id="updateUserBtn" class="btn btn-primary  col-md-4 mr-2" type="button">Update User Info</button>
                            <button id="placeOrderBtn" class="btn btn-primary  col-md-4" type="button">Place Order</button>
                        </div>

                    </form>
                </div>
            </div>

        </div><!-- /.container -->
    </section>

    <script>
            $("#placeOrderBtn").click(function () {
                $.ajax({
                    url: '@Url.Action("PlaceOrder", "Shop")',
                    data: {
                        productIds: '@string.Join("-",Model.CartProductIds)',
                    },
                })
                .done(function (result) {
                    if (result.success) {
                        $.cookie("cartProduct", "", { path: '/' }); //path is so important to empty cookie not create new one
                        updateCartProducts();

                        swal("Done", "Your order has been placed successfuly.", {
                            icon: "success",
                        }).then(function (value) {
                            window.location = '@Url.Action("Index","Shop")';
                        });
                    }
                    else {
                        swal("OOPS", "Unable to place order.", {
                            icon: "warning",
                        });
                    }
                })
                .fail(function () {
                    alert("Fail");
                })
            });

            $("#updateUserBtn").click(function () {
                debugger;
                $.ajax({
                    url: '@Url.Action("UpdateUser","Shop")',
                    data: $("#updateUserForm").serialize(),
                    type: 'Post'
                })
                .done(function (result) {
                    if (result) {
                        $("#ChecoutContainer").html(result);
                        swal("Done", "Your information has been updated successfuly.", {
                            icon: "success",
                        });
                    }
                    else {
                        swal("Fail", "Failed to update.", {
                            icon: "warning",
                        });
                    }
                })
                .fail(function () {
                    swal("Fail", "Failed.", {
                        icon: "warning",
                    });
                })
            });

    </script>
}
else
{
    <div class="alert alert-danger">
        No products in cart yet.
    </div>
}